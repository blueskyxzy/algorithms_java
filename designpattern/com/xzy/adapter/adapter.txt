适配器模式：
   一个接口转成客户需要的另一个接口，让完成不兼容接口一起工作。

1.目标接口Target
2.需求适配的接口Adaptee
3.适配器Adapter

解决问题："现存的对象"放到新的环境中，而新环境要求的接口是现对象不能满足的。修改一个正常运行的系统的接口，满足新接口要求。

关键代码：适配器继承或依赖已有的对象，实现想要的目标接口。

实际应用：
1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。
2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。
3、在 LINUX 上运行 WINDOWS 程序。
4、JAVA 中的 jdbc。
5  java.io.InputStreamReader(InputStream),java.io.InputStreamWriter(OutputStream)

优点：
1、可以让任何两个没有关联的类一起运行。
2、提高了类的复用。
3、增加了类的透明度。
4、灵活性好。

缺点：
1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。
2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。