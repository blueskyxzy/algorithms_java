装饰器模式

动态为对象添加功能

无需通过继承添加子类就能扩展对象
使用对象关联代替继承关系，同时避免了系统体积的快速膨胀

意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。

主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。

何时使用：在不想增加很多子类的情况下扩展类。

如何解决：将具体功能职责划分，同时继承装饰者模式。

关键代码：
1、Component 类充当抽象角色，不应该具体实现。
2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。

优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。

缺点：多层装饰比较复杂。

细节：
    Component抽象构件
    ConcreteComponent
    Decorator
    ConcreteDecorator


应用场景：
1.IO流中输入流和输出流的设计
2.Swing包中图形界面构件
3.Servlet中提供一个request对象的Decorator设计模式的默认
实现类HttpServletRequestWrapper,增强了request对象的功能
4.Struts2中，request,respone,session对象的处理

IO流实现细节：
    Component抽象角色：
        InputStream,OutputStream,Reader,Writer
    ConcreteComponent:
        FileInputStream
    Decorator:
        FilterInputStream,FilterOutputStream
    ConcreteDecorator:
        BufferdedOutputStram,BufferedInputStream
