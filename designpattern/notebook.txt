设计模式 GOF23
Group Of Four（4个人总结的软件设计的套路） 提高项目的扩展性，方便维护，分工

分类：
    创建型模式： (关注对象的创建过程)    5个
    单例模式  工厂模式  抽象工厂模式  创造者模式  原型模式

    结构型模式： （关注对象和类的组织）   7个
    适配器模式  桥接模式  装饰模式  组合模式  外观模式  享元模式  代理模式

    行为型模式：  （关注对象间的相互交互和通信，明确对象的职责）   11个
    模板方法模式  命令模式  迭代器模式  观察者模式  中介者模式  备忘录模式
    解释器模式   状态模式  策略模式  职责链模式  访问者模式

    J2EE 模式：（这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的）
        MVC 模式（MVC Pattern）
        业务代表模式（Business Delegate Pattern）
        组合实体模式（Composite Entity Pattern）
        数据访问对象模式（Data Access Object Pattern）
        前端控制器模式（Front Controller Pattern）
        拦截过滤器模式（Intercepting Filter Pattern）
        服务定位器模式（Service Locator Pattern）
        传输对象模式（Transfer Object Pattern）

面向对象设计原则：
    1.OCP  Open-Closed Principle 开闭原则
        对扩展开发，对修改关闭
    2.DIP  dependence Inversion Principle 依赖倒转原则
        针对接口编程，不要针对实现编程
    3.LoD  Law of Demeter 迪米特原则
        只与直接朋友通信，不与陌生人通信
    设计模式的六大原则

    1、开闭原则（Open Close Principle）

    开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。

    2、里氏代换原则（Liskov Substitution Principle）

    里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。

    3、依赖倒转原则（Dependence Inversion Principle）

    这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。

    4、接口隔离原则（Interface Segregation Principle）

    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。

    5、迪米特法则，又称最少知道原则（Demeter Principle）

    最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。

    6、合成复用原则（Composite Reuse Principle）

    合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。


结构性模式的核心作用是在程序上实现松耦合



应用：

    单例模式和工厂模式结合




总结：
1.单例模式 singleton !!!
    创建 对象唯一性

    5种实现方式：
    1.饿汉式（线程安全，效率高，但不能延迟加载）
    2.懒汉式（线程安全，效率不高，能延迟加载）
    3.双重检测琐式（由于JVM底层内部模型原因，偶尔会出问题，不建议使用）
    4.静态内部类式（线程安全，效率高，可以延迟加载）
    5.枚举单例（线程安全，效率高，不能延迟加载）

    应用实例：
    1.Windows的 任务管理器
    2.Windows的回收站
    3.读取配置文件的类
    4.网站的计数器，以便同步
    5.数据库连接池
    6.操作系统的文件系统
    7.servlet的Application
    8.Spring中的每个bean.优点方便Spring容器管理
    9.servlet的每个Servlet
    10.Spring MVC/struts1中的控制器对象

2.工厂模式 !!!
    易于相同功能接口不同实现类的扩展维护

    简单工厂simplefactory
    不满足开闭原则，扩展需要修改factory代码
    写一个factory类。一个create方法，根据type,if else返回不同的实例对象给接口，通过接口对象调用共同的方法。

    工厂方法factorymethod
    写一个工厂接口 多个自定义的工厂类，扩展新增工厂类和创建对应实现类的方法。

    应用实例：
    1.JDK中的Calendar的getInstance
    2.JDBC中Connectio对象的获取
    3.Hibernate中SessionFactory创建session
    4.spring中IOC容器创建管理bean对象
    5.XML解析时的DOcumentBuilderFactory创建解析器对象
    6.反射中CLass对象的newInstance()

3.抽象工厂模式 abstractfactory
    用于不同产品族的全部产品
    多个业务种类，业务分类
    写一个工厂接口 多个产品接口，多个工厂类创建不同类型的产品实现。

4.创造者模式 builder  !!!
    构建（Builder负责）和装配（Director负责）的解耦，和复用

    写一个构建接口和装配器接口以及他们的实现。Builder实现产品的各成员变量的创建，写几个各成员变量build的方法，
    装配写一个方法将bulid的成员变量set入产品对象来实例的初始化
    构建build意思是new 产品的各个组件，装配Director是set各组件成员变量

    场景：
    1.StringBuilder类的append方法
    2.SQL中的PreparedStatement
    3.JDOM中，DomBuilder,SAXBulder

5.原型模式 又叫克隆模式，拷贝模式 prototype
    new 对象数据准备和访问繁琐，耗时，需求拷贝
    是内存操作，不同于new

    类需要实现Cloneable接口和clone方法(Object的方法)
    Prototype模式中最困难的是内存复制，java提供clone方法实现

    已有对象.clone,创建新对象，分为深拷贝和浅拷贝。浅复制是内存一样，引用变了，值也变了

6.适配器模式 adapter ！！！
    不修改不兼容接口，转成客户需要的另一个接口,  维护不需要修改原代码

    适配器继承或依赖已有的对象，实现想要的目标接口
    目标接口Target，需求适配的接口Adaptee，适配器Adapter。

    类适配器方式：适配器继承Adaptee,实现Target.Target方法中调用Adaptee的方法 Target t = new Adapter();
    对象适配器方式，使用组合方式整合：实现Target,保存Adaptee成员变量，先构造实例化再调用方法。可弥补单继承缺陷 Target t2 = new Adapter2(new Adaptee());

    应用实例：
    1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。
    2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。
    3、在 LINUX 上运行 WINDOWS 程序。
    4、JAVA 中的 jdbc。
    5  java.io.InputStreamReader(InputStream),java.io.InputStreamWriter(OutputStream)

7.桥接模式 bridge
    系统可多个角度分类问题，   扩展能力优秀，但也使系统更加复杂
    将抽象部分与实现部分分离，使它们都可以独立的变化。
    在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活
    如电脑可以分为台式电脑，pad,笔记本，笔记本分又分联想，戴尔，华硕等。电脑又可以分为联想电脑，戴尔电脑等，联想电脑分台式，笔记本，pad等

    关键代码：抽象类依赖实现类。
    Computer intelLapTop = new LapTop(new Intel());
    一个基类，多类别继承基类，一个接口，其他类别实现接口。基类保存另一个类别接口，子类需要改接口实现类来构造初始化。这样就可以新建一个两个类别维度的类了

8.装饰模式 decorator  !!!
    动态为对象添加功能
    扩展功能问题
    无需通过继承添加子类就能扩展对象，使用对象关联代替继承关系，同时避免了系统体积的快速膨胀

    关键代码：
    1、Component 类充当抽象角色，不应该具体实现。
    2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。
    原有接口Component和实现类concreteComponent。扩展时实现接口(装饰器Decorator)，并持有一个对象接口成员，通过原实现类构造初始化，扩展多个功能类concreteDecorator需要Component引用并重写父类方法，

    应用实例：
    1.IO流中输入流和输出流的设计
    2.Swing包中图形界面构件
    3.Servlet中提供一个request对象的Decorator设计模式的默认
    实现类HttpServletRequestWrapper,增强了request对象的功能
    4.Struts2中，request,respone,session对象的处理

    如InputStream inputStream = new BufferedInputStream(new FileInputStream(new File("decorator.txt")));
    Component: abstract class InputStream
    ConcreteComponent: FileInputStream extends InputStream
    Decorator: FilterInputStream  ,   protected volatile InputStream in;  protected FilterInputStream(InputStream in);
    ConcreteDecorator: BufferedInputStream, class BufferedInputStream extends FilterInputStream,     public BufferedInputStream(InputStream in) , 重写InputStream.reader等方法

    如Reader r = new BufferedReader(new InputStreamReader(new FileInputStream(new File("decorator.txt"))));
    Component: abstract class Reader
    ConcreteComponent: FileInputStream extends InputStream
    Decorator: StreamDecoder extends Reader ,private InputStream in; StreamDecoder.forInputStreamReader。
    ConcreteDecorator:  BufferedReader extends Reader  , public BufferedReader(Reader in)。InputStreamReader extends Reader , InputStreamReader(InputStream in) ，private final StreamDecoder sd;。

9.组合模式 composite
    处理树形结构

    应用实例：
    1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。
    2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。

10.外观模式
11.享元模式
12.代理模式
13.模板方法模式
14.命令模式
15.迭代器模式
16.观察者模式
17.中介者模式
18.备忘录模式
19.解释器模式
20.状态模式
21.策略模式
22.职责链模式
23.访问者模式



网上总结：
1.适配器模式 Adapter
  适配器模式是将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
  两个成熟的类需要通信，但是接口不同，由于开闭原则，我们不能去修改这两个类的接口，所以就需要一个适配器来完成衔接过程。
2.桥接模式 Bridge
  桥接模式将抽象部分与它的实现部分分离，是它们都可以独立地变化。它很好的支持了开闭原则和组合锯和复用原则。实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这些多角度分离出来让他们独立变化，减少他们之间的耦合。
3.组合模式 Composite
  组合模式将对象组合成树形结构以表示部分-整体的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。
4.装饰模式 Decorator
装饰模式动态地给一个对象添加一些额外的职责，就增加功能来说，它比生成子类更灵活。也可以这样说，装饰模式把复杂类中的核心职责和装饰功能区分开了，这样既简化了复杂类，有去除了相关类中重复的装饰逻辑。 装饰模式没有通过继承原有类来扩展功能，但却达到了一样的目的，而且比继承更加灵活，所以可以说装饰模式是继承关系的一种替代方案。
5.外观模式 Facade
 外观模式为子系统中的一组接口提供了同意的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。

外观模式中，客户对各个具体的子系统是不了解的，所以对这些子系统进行了封装，对外只提供了用户所明白的单一而简单的接口，用户直接使用这个接口就可以完成操作，而不用去理睬具体的过程，而且子系统的变化不会影响到用户，这样就做到了信息隐蔽。

6.享元模式 Flyweight
 享元模式为运用共享技术有效的支持大量细粒度的对象。因为它可以通过共享大幅度地减少单个实例的数目，避免了大量非常相似类的开销。.

      享元模式是一个类别的多个对象共享这个类别的一个对象，而不是各自再实例化各自的对象。这样就达到了节省内存的目的。
7.代理模式 Proxy
为其他对象提供一种代理，并由代理对象控制对原对象的引用，以间接控制对原对象的访问